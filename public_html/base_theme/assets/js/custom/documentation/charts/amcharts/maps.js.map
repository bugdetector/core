{"version":3,"file":"js/custom/documentation/charts/amcharts/maps.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;AACb;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B;AAChF;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,kCAAkC,qCAAqC;AACvE,oCAAoC,wCAAwC;AAC5E,+BAA+B,oCAAoC;AACnE,mCAAmC,8BAA8B;AACjE;AACA;AACA;AACA,aAAa;AACb;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0DAA0D;AAC1D;AACA,8CAA8C,mBAAmB;AACjE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uFAAuF;AACvF,uDAAuD,+EAA+E;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yDAAyD,kBAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC,kCAAkC,GAAG,GAAG;AACjF,yDAAyD,kBAAkB;AAC3E;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://metronic/../demo1/src/js/custom/documentation/charts/amcharts/maps.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTGeneralAmChartsMaps = function () {\r\n    // Shared variables\r\n    var chart;\r\n    const bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');\r\n    const bgColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-bg');\r\n\r\n    // Private functions\r\n    var demo1 = function () {\r\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\r\n        am5.ready(function () {\r\n            // Create root element\r\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\r\n            var root = am5.Root.new(\"kt_amcharts_1\");\r\n\r\n            // Set themes\r\n            // https://www.amcharts.com/docs/v5/concepts/themes/\r\n            root.setThemes([\r\n                am5themes_Animated.new(root)\r\n            ]);\r\n\r\n            // Create the map chart\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\r\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\r\n                panX: \"translateX\",\r\n                panY: \"translateY\",\r\n                projection: am5map.geoMercator()\r\n            }));\r\n\r\n            // Create main polygon series for countries\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodata_worldLow,\r\n                exclude: [\"AQ\"]\r\n            }));\r\n\r\n            polygonSeries.mapPolygons.template.setAll({\r\n                tooltipText: \"{name}\",\r\n                toggleKey: \"active\",\r\n                interactive: true\r\n            });\r\n\r\n            polygonSeries.mapPolygons.template.states.create(\"hover\", {\r\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\r\n            });\r\n\r\n            polygonSeries.mapPolygons.template.states.create(\"active\", {\r\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\r\n            });\r\n\r\n            // US Series\r\n            // Create main polygon series for countries\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var polygonSeriesUS = chart.series.push(am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodata_usaLow\r\n            }));\r\n\r\n            polygonSeriesUS.mapPolygons.template.setAll({\r\n                tooltipText: \"{name}\",\r\n                toggleKey: \"active\",\r\n                interactive: true\r\n            });\r\n\r\n            var colors = am5.ColorSet.new(root, {});\r\n\r\n            polygonSeriesUS.mapPolygons.template.set(\"fill\", colors.getIndex(3));\r\n\r\n            polygonSeriesUS.mapPolygons.template.states.create(\"hover\", {\r\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\r\n            });\r\n\r\n            polygonSeriesUS.mapPolygons.template.states.create(\"active\", {\r\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\r\n            });\r\n\r\n            // Add zoom control\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\r\n            chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\r\n\r\n            // Set clicking on \"water\" to zoom out\r\n            chart.chartContainer.get(\"background\").events.on(\"click\", function () {\r\n                chart.goHome();\r\n            })\r\n\r\n            // Make stuff animate on load\r\n            chart.appear(1000, 100);\r\n        }); // end am5.ready()\r\n    }\r\n\r\n    var demo2 = function () {\r\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\r\n        am5.ready(function () {\r\n\r\n            // Create root element\r\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\r\n            var root = am5.Root.new(\"kt_amcharts_2\");\r\n\r\n            // Set themes\r\n            // https://www.amcharts.com/docs/v5/concepts/themes/\r\n            root.setThemes([\r\n                am5themes_Animated.new(root)\r\n            ]);\r\n\r\n            // Create the map chart\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\r\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\r\n                panX: \"rotateX\",\r\n                panY: \"translateY\",\r\n                projection: am5map.geoMercator(),\r\n                homeGeoPoint: { latitude: 2, longitude: 2 }\r\n            }));\r\n\r\n            var cont = chart.children.push(am5.Container.new(root, {\r\n                layout: root.horizontalLayout,\r\n                x: 20,\r\n                y: 40\r\n            }));\r\n\r\n            // Add labels and controls\r\n            cont.children.push(am5.Label.new(root, {\r\n                centerY: am5.p50,\r\n                text: \"Map\",\r\n                fill: bodyColor\r\n            }));\r\n\r\n            var switchButton = cont.children.push(am5.Button.new(root, {\r\n                themeTags: [\"switch\"],\r\n                centerY: am5.p50,\r\n                icon: am5.Circle.new(root, {\r\n                    themeTags: [\"icon\"]\r\n                })\r\n            }));\r\n\r\n            switchButton.on(\"active\", function () {\r\n                if (!switchButton.get(\"active\")) {\r\n                    chart.set(\"projection\", am5map.geoMercator());\r\n                    chart.set(\"panY\", \"translateY\");\r\n                    chart.set(\"rotationY\", 0);\r\n                    backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0);\r\n                } else {\r\n                    chart.set(\"projection\", am5map.geoOrthographic());\r\n                    chart.set(\"panY\", \"rotateY\")\r\n\r\n                    backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0.1);\r\n                }\r\n            });\r\n\r\n            cont.children.push(\r\n                am5.Label.new(root, {\r\n                    centerY: am5.p50,\r\n                    text: \"Globe\",\r\n                    fill: bodyColor\r\n                })\r\n            );\r\n\r\n            // Create series for background fill\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\r\n            var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));\r\n            backgroundSeries.mapPolygons.template.setAll({\r\n                fill: root.interfaceColors.get(\"alternativeBackground\"),\r\n                fillOpacity: 0,\r\n                strokeOpacity: 0\r\n            });\r\n\r\n            // Add background polygon\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\r\n            backgroundSeries.data.push({\r\n                geometry: am5map.getGeoRectangle(90, 180, -90, -180)\r\n            });\r\n\r\n            // Create main polygon series for countries\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodata_worldLow\r\n            }));\r\n\r\n            // Create line series for trajectory lines\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/\r\n            var lineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\r\n            lineSeries.mapLines.template.setAll({\r\n                stroke: bodyColor,\r\n                strokeOpacity: 0.3\r\n            });\r\n\r\n            // Create point series for markers\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/\r\n            var pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n\r\n            pointSeries.bullets.push(function () {\r\n                var circle = am5.Circle.new(root, {\r\n                    radius: 7,\r\n                    tooltipText: \"Drag me!\",\r\n                    cursorOverStyle: \"pointer\",\r\n                    tooltipY: 0,\r\n                    fill: am5.color(0xffba00),\r\n                    stroke: bgColor,\r\n                    strokeWidth: 2,\r\n                    draggable: true\r\n                });\r\n\r\n                circle.events.on(\"dragged\", function (event) {\r\n                    var dataItem = event.target.dataItem;\r\n                    var projection = chart.get(\"projection\");\r\n                    var geoPoint = chart.invert({ x: circle.x(), y: circle.y() });\r\n\r\n                    dataItem.setAll({\r\n                        longitude: geoPoint.longitude,\r\n                        latitude: geoPoint.latitude\r\n                    });\r\n                });\r\n\r\n                return am5.Bullet.new(root, {\r\n                    sprite: circle\r\n                });\r\n            });\r\n\r\n            var paris = addCity({ latitude: 48.8567, longitude: 2.351 }, \"Paris\");\r\n            var toronto = addCity({ latitude: 43.8163, longitude: -79.4287 }, \"Toronto\");\r\n            var la = addCity({ latitude: 34.3, longitude: -118.15 }, \"Los Angeles\");\r\n            var havana = addCity({ latitude: 23, longitude: -82 }, \"Havana\");\r\n\r\n            var lineDataItem = lineSeries.pushDataItem({\r\n                pointsToConnect: [paris, toronto, la, havana]\r\n            });\r\n\r\n            var planeSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n\r\n            var plane = am5.Graphics.new(root, {\r\n                svgPath:\r\n                    \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\r\n                scale: 0.06,\r\n                centerY: am5.p50,\r\n                centerX: am5.p50,\r\n                fill: bgColor\r\n            });\r\n\r\n            planeSeries.bullets.push(function () {\r\n                var container = am5.Container.new(root, {});\r\n                container.children.push(plane);\r\n                return am5.Bullet.new(root, { sprite: container });\r\n            });\r\n\r\n            var planeDataItem = planeSeries.pushDataItem({\r\n                lineDataItem: lineDataItem,\r\n                positionOnLine: 0,\r\n                autoRotate: true\r\n            });\r\n\r\n            planeDataItem.animate({\r\n                key: \"positionOnLine\",\r\n                to: 1,\r\n                duration: 10000,\r\n                loops: Infinity,\r\n                easing: am5.ease.yoyo(am5.ease.linear)\r\n            });\r\n\r\n            planeDataItem.on(\"positionOnLine\", function (value) {\r\n                if (value >= 0.99) {\r\n                    plane.set(\"rotation\", 180);\r\n                } else if (value <= 0.01) {\r\n                    plane.set(\"rotation\", 0);\r\n                }\r\n            });\r\n\r\n            function addCity(coords, title) {\r\n                return pointSeries.pushDataItem({\r\n                    latitude: coords.latitude,\r\n                    longitude: coords.longitude\r\n                });\r\n            }\r\n\r\n            // Make stuff animate on load\r\n            chart.appear(1000, 100);\r\n\r\n        }); // end am5.ready()\r\n    }\r\n\r\n    var demo3 = function () {\r\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\r\n        am5.ready(function () {\r\n\r\n            // Create root element\r\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\r\n            var root = am5.Root.new(\"kt_amcharts_3\");\r\n\r\n\r\n            // Set themes\r\n            // https://www.amcharts.com/docs/v5/concepts/themes/\r\n            root.setThemes([\r\n                am5themes_Animated.new(root)\r\n            ]);\r\n\r\n\r\n            // Create the map chart\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\r\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\r\n                panX: \"rotateX\",\r\n                panY: \"rotateY\",\r\n                projection: am5map.geoOrthographic(),\r\n                paddingBottom: 20,\r\n                paddingTop: 20,\r\n                paddingLeft: 20,\r\n                paddingRight: 20\r\n            }));\r\n\r\n\r\n            // Create main polygon series for countries\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodata_worldLow\r\n            }));\r\n\r\n            polygonSeries.mapPolygons.template.setAll({\r\n                tooltipText: \"{name}\",\r\n                toggleKey: \"active\",\r\n                interactive: true\r\n            });\r\n\r\n            polygonSeries.mapPolygons.template.states.create(\"hover\", {\r\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\r\n            });\r\n\r\n\r\n            // Create series for background fill\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\r\n            var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));\r\n            backgroundSeries.mapPolygons.template.setAll({\r\n                fill: root.interfaceColors.get(\"alternativeBackground\"),\r\n                fillOpacity: 0.1,\r\n                strokeOpacity: 0\r\n            });\r\n            backgroundSeries.data.push({\r\n                geometry: am5map.getGeoRectangle(90, 180, -90, -180)\r\n            });\r\n\r\n\r\n            // Create graticule series\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/\r\n            var graticuleSeries = chart.series.push(am5map.GraticuleSeries.new(root, {}));\r\n            graticuleSeries.mapLines.template.setAll({ strokeOpacity: 0.1, stroke: root.interfaceColors.get(\"alternativeBackground\") })\r\n\r\n\r\n            // Rotate animation\r\n            chart.animate({\r\n                key: \"rotationX\",\r\n                from: 0,\r\n                to: 360,\r\n                duration: 30000,\r\n                loops: Infinity\r\n            });\r\n\r\n\r\n            // Make stuff animate on load\r\n            chart.appear(1000, 100);\r\n\r\n        }); // end am5.ready()\r\n    }\r\n\r\n    var demo4 = function () {\r\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\r\n        am5.ready(function () {\r\n\r\n            // Create root element\r\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\r\n            var root = am5.Root.new(\"kt_amcharts_4\");\r\n\r\n            // Set themes\r\n            // https://www.amcharts.com/docs/v5/concepts/themes/\r\n            root.setThemes([\r\n                am5themes_Animated.new(root)\r\n            ]);\r\n\r\n            // Create the map chart\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\r\n            var chart = root.container.children.push(\r\n                am5map.MapChart.new(root, {\r\n                    panX: \"translateX\",\r\n                    panY: \"translateY\",\r\n                    projection: am5map.geoMercator()\r\n                })\r\n            );\r\n\r\n            var colorSet = am5.ColorSet.new(root, {});\r\n\r\n            // Create main polygon series for time zone areas\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var areaSeries = chart.series.push(\r\n                am5map.MapPolygonSeries.new(root, {\r\n                    geoJSON: am5geodata_worldTimeZoneAreasLow\r\n                })\r\n            );\r\n\r\n            var areaPolygonTemplate = areaSeries.mapPolygons.template;\r\n            areaPolygonTemplate.setAll({ fillOpacity: 0.6 });\r\n            areaPolygonTemplate.adapters.add(\"fill\", function (fill, target) {\r\n                return am5.Color.saturate(\r\n                    colorSet.getIndex(areaSeries.mapPolygons.indexOf(target)),\r\n                    0.5\r\n                );\r\n            });\r\n\r\n            areaPolygonTemplate.states.create(\"hover\", { fillOpacity: 0.8 });\r\n\r\n            // Create main polygon series for time zones\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\r\n            var zoneSeries = chart.series.push(\r\n                am5map.MapPolygonSeries.new(root, {\r\n                    geoJSON: am5geodata_worldTimeZonesLow\r\n                })\r\n            );\r\n\r\n            zoneSeries.mapPolygons.template.setAll({\r\n                fill: am5.color(0x000000),\r\n                fillOpacity: 0.08\r\n            });\r\n\r\n            var zonePolygonTemplate = zoneSeries.mapPolygons.template;\r\n            zonePolygonTemplate.setAll({ interactive: true, tooltipText: \"{id}\" });\r\n            zonePolygonTemplate.states.create(\"hover\", { fillOpacity: 0.3 });\r\n\r\n            // labels\r\n            var labelSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n            labelSeries.bullets.push(() => {\r\n                return am5.Bullet.new(root, {\r\n                    sprite: am5.Label.new(root, {\r\n                        text: \"{id}\",\r\n                        populateText: true,\r\n                        centerX: am5.p50,\r\n                        centerY: am5.p50,\r\n                        fontSize: \"0.7em\",\r\n                        fill: bodyColor\r\n                    })\r\n                });\r\n            });\r\n\r\n            // create labels for each zone\r\n            zoneSeries.events.on(\"datavalidated\", () => {\r\n                am5.array.each(zoneSeries.dataItems, (dataItem) => {\r\n                    var centroid = dataItem.get(\"mapPolygon\").visualCentroid();\r\n                    labelSeries.pushDataItem({\r\n                        id: dataItem.get(\"id\"),\r\n                        geometry: {\r\n                            type: \"Point\",\r\n                            coordinates: [centroid.longitude, centroid.latitude]\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Add zoom control\r\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\r\n            chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\r\n\r\n            // Add labels and controls\r\n            var cont = chart.children.push(\r\n                am5.Container.new(root, {\r\n                    layout: root.horizontalLayout,\r\n                    x: 20,\r\n                    y: 40\r\n                })\r\n            );\r\n\r\n            cont.children.push(\r\n                am5.Label.new(root, {\r\n                    centerY: am5.p50,\r\n                    text: \"Map\",\r\n                    fill: bodyColor\r\n                })\r\n            );\r\n\r\n            var switchButton = cont.children.push(\r\n                am5.Button.new(root, {\r\n                    themeTags: [\"switch\"],\r\n                    centerY: am5.p50,\r\n                    icon: am5.Circle.new(root, {\r\n                        themeTags: [\"icon\"]\r\n                    })\r\n                })\r\n            );\r\n\r\n            switchButton.on(\"active\", function () {\r\n                if (!switchButton.get(\"active\")) {\r\n                    chart.set(\"projection\", am5map.geoMercator());\r\n                    chart.set(\"panX\", \"translateX\");\r\n                    chart.set(\"panY\", \"translateY\");\r\n                } else {\r\n                    chart.set(\"projection\", am5map.geoOrthographic());\r\n                    chart.set(\"panX\", \"rotateX\");\r\n                    chart.set(\"panY\", \"rotateY\");\r\n                }\r\n            });\r\n\r\n            cont.children.push(\r\n                am5.Label.new(root, {\r\n                    centerY: am5.p50,\r\n                    text: \"Globe\",\r\n                    fill: bodyColor\r\n                })\r\n            );\r\n            // Make stuff animate on load\r\n            chart.appear(1000, 100);\r\n\r\n        }); // end am5.ready()\r\n    }\r\n\r\n    return {\r\n        // Public Functions\r\n        init: function () {\r\n            demo1();\r\n            demo2();\r\n            demo3();\r\n            demo4();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTGeneralAmChartsMaps.init();\r\n});"],"names":[],"sourceRoot":""}