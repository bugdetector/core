<?php

namespace Src\Entity;

use CoreDB\Kernel\ConfigurationManager;
use CoreDB\Kernel\Database\DataType\DateTime;
use CoreDB\Kernel\Model;
use CoreDB\Kernel\Database\DataType\ShortText;
use CoreDB\Kernel\Database\DataType\TableReference;
use CoreDB\Kernel\Messenger;
use Src\Controller\Profile\SessionsController;
use Src\Views\TextElement;

/**
 * Object relation with table sessions
 * @author murat
 */

class Session extends Model
{

    public const POLICY_NOTIFY_ALL_USERS = "notify_all_users";
    public const POLICY_ROLE_BASED_NOTIFY = "role_based_notify";
    public const POLICY_NOT_NOTIFY = "not_notify";

    /**
    * @var ShortText $session_key
    * Session key generated by php.
    */
    public ShortText $session_key;
    /**
    * @var ShortText $ip_address
    * Ip adress of user logged in device.
    */
    public ShortText $ip_address;
    /**
    * @var TableReference $user
    * User reference. Logged in user.
    */
    public TableReference $user;
    /**
    * @var ShortText $remember_me_token
    * Remember me token for session.
    */
    public ShortText $remember_me_token;
     /**
    * @var DateTime $last_access
    * Last used time of this session.
    */
    public DateTime $last_access;

    /**
     * @inheritdoc
     */
    public static function getTableName(): string
    {
        return "sessions";
    }

    public function insert()
    {
        $userClass = ConfigurationManager::getInstance()->getEntityInfo("users")["class"];
        self::checkLoginPolicy($userClass::get($this->user->getValue()));
        return parent::insert();
    }

    public static function checkLoginPolicy(User $user)
    {
        if (defined("LOGIN_POLICY") && LOGIN_POLICY != self::POLICY_NOT_NOTIFY) {
            $notify = false;
            switch (LOGIN_POLICY) {
                case self::POLICY_NOTIFY_ALL_USERS:
                    $notify = true;
                    break;
                case self::POLICY_ROLE_BASED_NOTIFY:
                    if (!empty($user->roles->getValue())) {
                        foreach (LOGIN_POLICY_ROLES as $role) {
                            if ($user->isUserInRole($role)) {
                                $notify = true;
                                break;
                            }
                        }
                    }
                    break;
            }

            if ($notify) {
                $userSessions = $user->getUserSessions();
                \CoreDB::messenger()->createMessage(
                    TextElement::create(Translation::getTranslation(
                        "user_sessions_notify",
                        [
                            count($userSessions),
                            SessionsController::getUrl()
                        ]
                    ))->setIsRaw(true),
                    Messenger::WARNING
                );
            }
        }
    }
}
